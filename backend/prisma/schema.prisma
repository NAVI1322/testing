generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  email     String     @unique
  password  String
  role      Role
  createdAt DateTime   @default(now())
  updatedAt DateTime?  @updatedAt
  Employee  Employee?
  Recruiter Recruiter?
}

model Employee {
  id           String        @id @default(uuid())
  firstName    String
  lastName     String
  email        String        @unique
  about        String?
  userId       Int           @unique
  user         User          @relation(fields: [userId], references: [id] , onDelete: Cascade)
  address      String?       // Ensure 'address' is defined here
  phoneNumber  String?
  location     String?       // If this field is optional 
  resume       String?
  coverLetter  String?
  whyJoin      String?
  availability String?
  history      E_History[]
  archived     E_Archive[]
  applications Application[] // Applications submitted by the employee
  createdAt    DateTime      @default(now())
  updatedAt    DateTime?     @updatedAt
}

model Recruiter {
  id             String                   @id @default(uuid())
  companyName    String
  firstName      String
  lastName       String
  aboutCompany   String
  email          String
  userId         Int                      @unique
  user           User                     @relation(fields: [userId], references: [id])
  availableJobs  AvailableJobRecruiter[]
  applications   Application[]            // Applications linked to this recruiter
  createdAt      DateTime                 @default(now())
  updatedAt      DateTime?                @updatedAt
}

model JobDescription {
  id                       String         @id @default(uuid())
  jobName                  String
  location                 String
  description              String
  benefits                 String
  ourValues                String
  positionSummary          String
  positionResponsibilities String
  wageRate                 String
  skills                   String
  whyWorkWithUs            String
  availableJobs            AvailableJob[] @relation("JobDescriptionAvailableJobs")
  createdAt                DateTime       @default(now())
  updatedAt                DateTime?      @updatedAt
}

model AvailableJob {
  id               String                 @id @default(uuid())
  jobDescriptionId String
  jobDescription   JobDescription         @relation("JobDescriptionAvailableJobs", fields: [jobDescriptionId], references: [id], onDelete: Cascade)
  questions        Question[]
  recruiters       AvailableJobRecruiter[]
  applications     Application[]          // No fields or references here
  createdAt        DateTime               @default(now())
  updatedAt        DateTime?              @updatedAt
}


model AvailableJobRecruiter {
  id               String        @id @default(uuid())
  availableJobId   String
  recruiterId      String
  availableJob     AvailableJob  @relation(fields: [availableJobId], references: [id], onDelete: Cascade)
  recruiter        Recruiter     @relation(fields: [recruiterId], references: [id], onDelete: Cascade)
  createdAt        DateTime      @default(now())
}

model Question {
  id             String        @id @default(uuid())
  availableJobId String
  availableJob   AvailableJob  @relation(fields: [availableJobId], references: [id])
  type           String
  content        String
  options        String[]
  correctAnswers String[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime?     @updatedAt
}
model Application {
  id          String            @id @default(uuid())
  employeeId  String
  employee    Employee          @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  recruiterId String?           
  recruiter   Recruiter?        @relation(fields: [recruiterId], references: [id], onDelete: Cascade)
  jobId       String?           // Foreign key for AvailableJob
  job         AvailableJob?     @relation(fields: [jobId], references: [id], onDelete: Cascade) // Relation defined here
  position    String
  status      ApplicationStatus @default(PENDING)
  appliedAt   DateTime          @default(now())
  reviewedAt  DateTime?
  answers     Json              // Stores the answers provided by the employee
  score       Int               // Stores the score achieved in the quiz
  firstName   String
  lastName    String
  address     String
  phoneNumber String
  email       String
  location    String?
  resume      String?
  coverLetter String?
  whyJoin     String?
  availability String?
  createdBy   String?
  updatedBy   String?

  @@index([employeeId])
  @@index([recruiterId])
  @@index([status])
  @@index([employeeId, status])
  @@index([recruiterId, status])
}

model E_History {
  id          String    @id @default(uuid())
  employeeId  String
  employee    Employee  @relation(fields: [employeeId], references: [id])
  companyName String
  role        String
  startDate   DateTime
  endDate     DateTime?
  description String
}

model E_Archive {
  id          String   @id @default(uuid())
  employeeId  String
  employee    Employee @relation(fields: [employeeId], references: [id])
  companyName String
  archivedAt  DateTime @default(now())
}

enum Role {
  JOB_SEEKER
  RECRUITER
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
  ARCHIVED
}